[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "offshore-leaks-mcp-server"
version = "0.1.0"
description = "MCP Server for ICIJ Offshore Leaks Database"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "Research Team", email = "research@example.com" },
]
keywords = [
    "mcp",
    "model-context-protocol",
    "offshore-leaks",
    "icij",
    "neo4j",
    "investigative-journalism",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Database :: Front-Ends",
]
dependencies = [
    "neo4j>=5.0.0",
    "pydantic>=2.0.0",
    "anyio>=4.0.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
mcp = [
    "mcp>=1.0.0; python_version>='3.10'",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "neo4j-test-harness>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/markramm/offshoreleaks-data-packages"
Repository = "https://github.com/markramm/offshoreleaks-data-packages"
Documentation = "https://github.com/markramm/offshoreleaks-data-packages/tree/main/mcp/docs"
"Bug Tracker" = "https://github.com/markramm/offshoreleaks-data-packages/issues"

[project.scripts]
offshore-leaks-mcp = "offshore_leaks_mcp.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/offshore_leaks_mcp"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B018"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "neo4j.*",
    "mcp.*",
    "tests.*",
]
ignore_missing_imports = true
disallow_untyped_decorators = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["src"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
show_missing = true
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]
